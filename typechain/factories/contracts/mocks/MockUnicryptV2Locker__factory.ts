/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockUnicryptV2Locker,
  MockUnicryptV2LockerInterface,
} from "../../../contracts/mocks/MockUnicryptV2Locker";

const _abi = [
  {
    inputs: [],
    name: "ETH_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gFees",
    outputs: [
      {
        internalType: "uint256",
        name: "ethFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "secondaryFeeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "secondaryTokenFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "secondaryTokenDiscount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidityFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "referralPercent",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referralToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "referralHold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "referralDiscount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getUserLockForTokenAtIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "lockDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "initialAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlockDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lockID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
    ],
    name: "getUserNumLocksForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unlock_date",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_referral",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_fee_in_eth",
        type: "bool",
      },
      {
        internalType: "address payable",
        name: "_withdrawer",
        type: "address",
      },
    ],
    name: "lockLPToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "locks",
    outputs: [
      {
        internalType: "uint256",
        name: "lockDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "initialAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlockDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lockID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_shouldFail",
        type: "bool",
      },
    ],
    name: "setShouldFail",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shouldFail",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userNumLocksForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_lockID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526001805460ff19169055348015601957600080fd5b506108c3806100296000396000f3fe6080604052600436106100855760003560e01c806330599887146100915780633339657d146100d95780633bb3bba4146101795780634532d77614610194578063678d2204146101b65780638af416f6146101e057806390e1a003146101f3578063a5aa5c1214610252578063a69d9c4f14610280578063d4ff493f146102a057600080fd5b3661008c57005b600080fd5b34801561009d57600080fd5b506100c66100ac3660046106d7565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b3480156100e557600080fd5b506101436100f4366004610710565b600260208181526000948552604080862082529385528385209052908352912080546001820154928201546003830154600484015460059094015492949391929091906001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c0016100d0565b34801561018557600080fd5b506100c6662386f26fc1000081565b3480156101a057600080fd5b506101b46101af366004610751565b610317565b005b3480156101c257600080fd5b506001546101d09060ff1681565b60405190151581526020016100d0565b6101b46101ee36600461079a565b6104b7565b3480156101ff57600080fd5b5060408051662386f26fc100008152600060208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152610120016100d0565b34801561025e57600080fd5b506101b461026d36600461080a565b6001805460ff1916911515919091179055565b34801561028c57600080fd5b506100c661029b3660046106d7565b610694565b3480156102ac57600080fd5b506101436102bb366004610710565b6001600160a01b0392831660009081526002602081815260408084209587168452948152848320938352929092529190912080546001820154928201546003830154600484015460059094015492969495919490939290911690565b3360008181526002602090815260408083206001600160a01b038981168552908352818420888552909252909120600581015490929116146103915760405162461bcd60e51b815260206004820152600e60248201526d2737ba103637b1b59037bbb732b960911b60448201526064015b60405180910390fd5b80600301544210156103d45760405162461bcd60e51b815260206004820152600c60248201526b14dd1a5b1b081b1bd8dad95960a21b6044820152606401610388565b81816001015410156104255760405162461bcd60e51b815260206004820152601a602482015279125b9cdd59999a58da595b9d081b1bd8dad95908185b5bdd5b9d60321b6044820152606401610388565b818160010160008282546104399190610844565b909155505060405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0386169063a9059cbb906044016020604051808303816000875af115801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610857565b505050505050565b60015460ff16156104f95760405162461bcd60e51b815260206004820152600c60248201526b4d6f636b206661696c75726560a01b6044820152606401610388565b662386f26fc100003410156105475760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e74204554482066656560601b6044820152606401610388565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd906064016020604051808303816000875af115801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190610857565b506001600160a01b03818116600090815260208181526040808320938a1683529290529081208054918291906105f383610874565b90915550506040805160c0810182524281526020808201898152828401998a5260608301988952608083018581526001600160a01b0396871660a08501818152600091825260028086528783209e8a1683529d85528682209782529690935293909120915182555160018201559651978701979097559351600386015594516004850155505051600590910180546001600160a01b03191691909216179055565b6001600160a01b03808316600090815260208181526040808320938516835292905220545b92915050565b6001600160a01b03811681146106d457600080fd5b50565b600080604083850312156106ea57600080fd5b82356106f5816106bf565b91506020830135610705816106bf565b809150509250929050565b60008060006060848603121561072557600080fd5b8335610730816106bf565b92506020840135610740816106bf565b929592945050506040919091013590565b6000806000806080858703121561076757600080fd5b8435610772816106bf565b966020860135965060408601359560600135945092505050565b80151581146106d457600080fd5b60008060008060008060c087890312156107b357600080fd5b86356107be816106bf565b9550602087013594506040870135935060608701356107dc816106bf565b925060808701356107ec8161078c565b915060a08701356107fc816106bf565b809150509295509295509295565b60006020828403121561081c57600080fd5b81356108278161078c565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106b9576106b961082e565b60006020828403121561086957600080fd5b81516108278161078c565b6000600182016108865761088661082e565b506001019056fea2646970667358221220cd2cccafcc9b7bb19381433c6d1f2665a5984fd92e39d1fc374f728c548db22c64736f6c634300081e0033";

type MockUnicryptV2LockerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUnicryptV2LockerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUnicryptV2Locker__factory extends ContractFactory {
  constructor(...args: MockUnicryptV2LockerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockUnicryptV2Locker & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockUnicryptV2Locker__factory {
    return super.connect(runner) as MockUnicryptV2Locker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUnicryptV2LockerInterface {
    return new Interface(_abi) as MockUnicryptV2LockerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockUnicryptV2Locker {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockUnicryptV2Locker;
  }
}
