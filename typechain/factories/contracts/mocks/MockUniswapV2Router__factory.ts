/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockUniswapV2Router,
  MockUniswapV2RouterInterface,
} from "../../../contracts/mocks/MockUniswapV2Router";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_WETH",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "removeLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    name: "setAddLiquidityResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    name: "setFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    name: "setRemoveLiquidityResults",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405268056bc75e2d63100000600255678ac7230489e800006003556802b5e3af16b1880000600455348015603557600080fd5b506040516107c43803806107c4833981016040819052605291609d565b600080546001600160a01b039384166001600160a01b0319918216179091556001805492909316911617905560cb565b80516001600160a01b0381168114609857600080fd5b919050565b6000806040838503121560af57600080fd5b60b6836082565b915060c2602084016082565b90509250929050565b6106ea806100da6000396000f3fe60806040526004361061006f5760003560e01c806302751cec1461007b578063460a4b1a146100b55780635bb47808146100d7578063ad5c464814610114578063baa2abde1461014c578063bd036b8f1461016c578063c45a015514610192578063f305d719146101b257600080fd5b3661007657005b600080fd5b34801561008757600080fd5b5061009b610096366004610531565b6101e0565b604080519283526020830191909152015b60405180910390f35b3480156100c157600080fd5b506100d56100d036600461058b565b600455565b005b3480156100e357600080fd5b506100d56100f23660046105a4565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b34801561012057600080fd5b50600154610134906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b34801561015857600080fd5b5061009b6101673660046105c6565b610317565b34801561017857600080fd5b506100d5610187366004610633565b600291909155600355565b34801561019e57600080fd5b50600054610134906001600160a01b031681565b6101c56101c0366004610531565b61048a565b604080519384526020840192909252908201526060016100ac565b600080876001600160a01b03166323b872dd33308a6040518463ffffffff1660e01b815260040161021393929190610655565b6020604051808303816000875af1158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190610679565b5060025460405163a9059cbb60e01b81526001600160a01b038a169163a9059cbb9161028691889160040161069b565b6020604051808303816000875af11580156102a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c99190610679565b506003546040516001600160a01b0386169180156108fc02916000818181858888f19350505050158015610301573d6000803e3d6000fd5b5060025460035491509150965096945050505050565b600080886001600160a01b03166323b872dd33308a6040518463ffffffff1660e01b815260040161034a93929190610655565b6020604051808303816000875af1158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d9190610679565b5060025460405163a9059cbb60e01b81526001600160a01b038b169163a9059cbb916103bd91889160040161069b565b6020604051808303816000875af11580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104009190610679565b5060035460405163a9059cbb60e01b81526001600160a01b038a169163a9059cbb9161043091889160040161069b565b6020604051808303816000875af115801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610679565b506002546003549150915097509795505050505050565b6000806000886001600160a01b03166323b872dd33308b6040518463ffffffff1660e01b81526004016104bf93929190610655565b6020604051808303816000875af11580156104de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105029190610679565b5050600454969834985095505050505050565b80356001600160a01b038116811461052c57600080fd5b919050565b60008060008060008060c0878903121561054a57600080fd5b61055387610515565b955060208701359450604087013593506060870135925061057660808801610515565b9598949750929591949360a090920135925050565b60006020828403121561059d57600080fd5b5035919050565b6000602082840312156105b657600080fd5b6105bf82610515565b9392505050565b600080600080600080600060e0888a0312156105e157600080fd5b6105ea88610515565b96506105f860208901610515565b955060408801359450606088013593506080880135925061061b60a08901610515565b96999598509396929591949193505060c09091013590565b6000806040838503121561064657600080fd5b50508035926020909101359150565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561068b57600080fd5b815180151581146105bf57600080fd5b6001600160a01b0392909216825260208201526040019056fea2646970667358221220df1945211a945b98a9b028c5eca6b6736151e3858f217e5f12502a5f14358ad564736f6c634300081e0033";

type MockUniswapV2RouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapV2RouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapV2Router__factory extends ContractFactory {
  constructor(...args: MockUniswapV2RouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _factory: AddressLike,
    _WETH: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_factory, _WETH, overrides || {});
  }
  override deploy(
    _factory: AddressLike,
    _WETH: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_factory, _WETH, overrides || {}) as Promise<
      MockUniswapV2Router & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockUniswapV2Router__factory {
    return super.connect(runner) as MockUniswapV2Router__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapV2RouterInterface {
    return new Interface(_abi) as MockUniswapV2RouterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockUniswapV2Router {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockUniswapV2Router;
  }
}
