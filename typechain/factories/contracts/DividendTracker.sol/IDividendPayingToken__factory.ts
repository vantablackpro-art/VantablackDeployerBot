/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDividendPayingToken,
  IDividendPayingTokenInterface,
} from "../../../contracts/DividendTracker.sol/IDividendPayingToken";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "weiAmount",
        type: "uint256",
      },
    ],
    name: "DividendWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "weiAmount",
        type: "uint256",
      },
    ],
    name: "DividendsDistributed",
    type: "event",
  },
  {
    inputs: [],
    name: "distributeDividends",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "dividendOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawDividend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDividendPayingToken__factory {
  static readonly abi = _abi;
  static createInterface(): IDividendPayingTokenInterface {
    return new Interface(_abi) as IDividendPayingTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDividendPayingToken {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IDividendPayingToken;
  }
}
