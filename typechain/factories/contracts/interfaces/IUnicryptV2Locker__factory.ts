/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IUnicryptV2Locker,
  IUnicryptV2LockerInterface,
} from "../../../contracts/interfaces/IUnicryptV2Locker";

const _abi = [
  {
    inputs: [],
    name: "gFees",
    outputs: [
      {
        internalType: "uint256",
        name: "ethFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "secondaryFeeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "secondaryTokenFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "secondaryTokenDiscount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidityFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "referralPercent",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referralToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "referralHold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "referralDiscount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
    ],
    name: "getNumLocksForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getUserLockForTokenAtIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "lockDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "initialAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlockDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lockID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
    ],
    name: "getUserNumLocksForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unlock_date",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_referral",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_fee_in_eth",
        type: "bool",
      },
      {
        internalType: "address payable",
        name: "_withdrawer",
        type: "address",
      },
    ],
    name: "lockLPToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_lockID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unlock_date",
        type: "uint256",
      },
    ],
    name: "relock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_lockID",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferLockOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_lockID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IUnicryptV2Locker__factory {
  static readonly abi = _abi;
  static createInterface(): IUnicryptV2LockerInterface {
    return new Interface(_abi) as IUnicryptV2LockerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IUnicryptV2Locker {
    return new Contract(address, _abi, runner) as unknown as IUnicryptV2Locker;
  }
}
