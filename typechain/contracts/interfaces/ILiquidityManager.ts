/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ILiquidityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "getLPLockInfoByPair"
      | "handleLPManagement"
      | "removeLiquidity"
      | "setUnicryptLocker"
      | "unicryptLockerAddress"
      | "unlockLP"
      | "withdrawETH"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LPLockedWithUnicrypt"
      | "LPTokensBurned"
      | "LPTokensLocked"
      | "LPTokensUnlocked"
      | "LPUnlockedFromUnicrypt"
      | "LiquidityRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPLockInfoByPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleLPManagement",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnicryptLocker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unicryptLockerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockLP",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPLockInfoByPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleLPManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnicryptLocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unicryptLockerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace LPLockedWithUnicryptEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    lpPair: AddressLike,
    amount: BigNumberish,
    unlockDate: BigNumberish,
    lockId: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    lpPair: string,
    amount: bigint,
    unlockDate: bigint,
    lockId: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    lpPair: string;
    amount: bigint;
    unlockDate: bigint;
    lockId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LPTokensBurnedEvent {
  export type InputTuple = [tokenAddress: AddressLike, lpAmount: BigNumberish];
  export type OutputTuple = [tokenAddress: string, lpAmount: bigint];
  export interface OutputObject {
    tokenAddress: string;
    lpAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LPTokensLockedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    lpAmount: BigNumberish,
    unlockTime: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    lpAmount: bigint,
    unlockTime: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    lpAmount: bigint;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LPTokensUnlockedEvent {
  export type InputTuple = [tokenAddress: AddressLike, lpAmount: BigNumberish];
  export type OutputTuple = [tokenAddress: string, lpAmount: bigint];
  export interface OutputObject {
    tokenAddress: string;
    lpAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LPUnlockedFromUnicryptEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    lpPair: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    lpPair: string,
    amount: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    lpPair: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [amountA: BigNumberish, amountB: BigNumberish];
  export type OutputTuple = [amountA: bigint, amountB: bigint];
  export interface OutputObject {
    amountA: bigint;
    amountB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILiquidityManager extends BaseContract {
  connect(runner?: ContractRunner | null): ILiquidityManager;
  waitForDeployment(): Promise<this>;

  interface: ILiquidityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [
      token: AddressLike,
      lpOwner: AddressLike,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  getLPLockInfoByPair: TypedContractMethod<
    [lpPair: AddressLike],
    [
      [boolean, bigint, bigint, string, bigint] & {
        isUnicryptLocked: boolean;
        unicryptUnlockDate: bigint;
        unicryptLockAmount: bigint;
        lockOwner: string;
        lockIndex: bigint;
      }
    ],
    "view"
  >;

  handleLPManagement: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      lpPair: AddressLike,
      dev: AddressLike,
      lpManagementOption: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  removeLiquidity: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[bigint, bigint]],
    "nonpayable"
  >;

  setUnicryptLocker: TypedContractMethod<
    [_unicryptLocker: AddressLike],
    [void],
    "nonpayable"
  >;

  unicryptLockerAddress: TypedContractMethod<[], [string], "view">;

  unlockLP: TypedContractMethod<
    [tokenAddress: AddressLike, lpPair: AddressLike, dev: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      token: AddressLike,
      lpOwner: AddressLike,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getLPLockInfoByPair"
  ): TypedContractMethod<
    [lpPair: AddressLike],
    [
      [boolean, bigint, bigint, string, bigint] & {
        isUnicryptLocked: boolean;
        unicryptUnlockDate: bigint;
        unicryptLockAmount: bigint;
        lockOwner: string;
        lockIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleLPManagement"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      lpPair: AddressLike,
      dev: AddressLike,
      lpManagementOption: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnicryptLocker"
  ): TypedContractMethod<[_unicryptLocker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unicryptLockerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unlockLP"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, lpPair: AddressLike, dev: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LPLockedWithUnicrypt"
  ): TypedContractEvent<
    LPLockedWithUnicryptEvent.InputTuple,
    LPLockedWithUnicryptEvent.OutputTuple,
    LPLockedWithUnicryptEvent.OutputObject
  >;
  getEvent(
    key: "LPTokensBurned"
  ): TypedContractEvent<
    LPTokensBurnedEvent.InputTuple,
    LPTokensBurnedEvent.OutputTuple,
    LPTokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "LPTokensLocked"
  ): TypedContractEvent<
    LPTokensLockedEvent.InputTuple,
    LPTokensLockedEvent.OutputTuple,
    LPTokensLockedEvent.OutputObject
  >;
  getEvent(
    key: "LPTokensUnlocked"
  ): TypedContractEvent<
    LPTokensUnlockedEvent.InputTuple,
    LPTokensUnlockedEvent.OutputTuple,
    LPTokensUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "LPUnlockedFromUnicrypt"
  ): TypedContractEvent<
    LPUnlockedFromUnicryptEvent.InputTuple,
    LPUnlockedFromUnicryptEvent.OutputTuple,
    LPUnlockedFromUnicryptEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;

  filters: {
    "LPLockedWithUnicrypt(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LPLockedWithUnicryptEvent.InputTuple,
      LPLockedWithUnicryptEvent.OutputTuple,
      LPLockedWithUnicryptEvent.OutputObject
    >;
    LPLockedWithUnicrypt: TypedContractEvent<
      LPLockedWithUnicryptEvent.InputTuple,
      LPLockedWithUnicryptEvent.OutputTuple,
      LPLockedWithUnicryptEvent.OutputObject
    >;

    "LPTokensBurned(address,uint256)": TypedContractEvent<
      LPTokensBurnedEvent.InputTuple,
      LPTokensBurnedEvent.OutputTuple,
      LPTokensBurnedEvent.OutputObject
    >;
    LPTokensBurned: TypedContractEvent<
      LPTokensBurnedEvent.InputTuple,
      LPTokensBurnedEvent.OutputTuple,
      LPTokensBurnedEvent.OutputObject
    >;

    "LPTokensLocked(address,uint256,uint256)": TypedContractEvent<
      LPTokensLockedEvent.InputTuple,
      LPTokensLockedEvent.OutputTuple,
      LPTokensLockedEvent.OutputObject
    >;
    LPTokensLocked: TypedContractEvent<
      LPTokensLockedEvent.InputTuple,
      LPTokensLockedEvent.OutputTuple,
      LPTokensLockedEvent.OutputObject
    >;

    "LPTokensUnlocked(address,uint256)": TypedContractEvent<
      LPTokensUnlockedEvent.InputTuple,
      LPTokensUnlockedEvent.OutputTuple,
      LPTokensUnlockedEvent.OutputObject
    >;
    LPTokensUnlocked: TypedContractEvent<
      LPTokensUnlockedEvent.InputTuple,
      LPTokensUnlockedEvent.OutputTuple,
      LPTokensUnlockedEvent.OutputObject
    >;

    "LPUnlockedFromUnicrypt(address,address,uint256)": TypedContractEvent<
      LPUnlockedFromUnicryptEvent.InputTuple,
      LPUnlockedFromUnicryptEvent.OutputTuple,
      LPUnlockedFromUnicryptEvent.OutputObject
    >;
    LPUnlockedFromUnicrypt: TypedContractEvent<
      LPUnlockedFromUnicryptEvent.InputTuple,
      LPUnlockedFromUnicryptEvent.OutputTuple,
      LPUnlockedFromUnicryptEvent.OutputObject
    >;

    "LiquidityRemoved(uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
  };
}
