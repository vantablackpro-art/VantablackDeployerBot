/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IVantablackDeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closeProject"
      | "executeHandover"
      | "getProjectTaxBalance"
      | "updateDeployedTokenTaxBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeProject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeHandover",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectTaxBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeployedTokenTaxBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "closeProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectTaxBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeployedTokenTaxBalance",
    data: BytesLike
  ): Result;
}

export interface IVantablackDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): IVantablackDeployer;
  waitForDeployment(): Promise<this>;

  interface: IVantablackDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeProject: TypedContractMethod<[], [void], "nonpayable">;

  executeHandover: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getProjectTaxBalance: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  updateDeployedTokenTaxBalance: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeProject"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeHandover"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProjectTaxBalance"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateDeployedTokenTaxBalance"
  ): TypedContractMethod<[], [void], "payable">;

  filters: {};
}
