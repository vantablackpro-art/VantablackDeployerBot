/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Token {
  export type TokenAddressesStruct = {
    lpPair: AddressLike;
    treasury: AddressLike;
    dividendToken: AddressLike;
  };

  export type TokenAddressesStructOutput = [
    lpPair: string,
    treasury: string,
    dividendToken: string
  ] & { lpPair: string; treasury: string; dividendToken: string };

  export type FeeStructureStruct = {
    buyFee: BigNumberish;
    sellFee: BigNumberish;
    transferFee: BigNumberish;
  };

  export type FeeStructureStructOutput = [
    buyFee: bigint,
    sellFee: bigint,
    transferFee: bigint
  ] & { buyFee: bigint; sellFee: bigint; transferFee: bigint };

  export type ProcessingConfigStruct = {
    swapThreshold: BigNumberish;
    burnPercent: BigNumberish;
  };

  export type ProcessingConfigStructOutput = [
    swapThreshold: bigint,
    burnPercent: bigint
  ] & { swapThreshold: bigint; burnPercent: bigint };
}

export interface TokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LAUNCH_TAX"
      | "MAX_FEE"
      | "ROI_THRESHOLD"
      | "TAX_DIVISOR"
      | "TAX_REDUCTION_TIME"
      | "VANTABLACK"
      | "VANTABLACK_DEPLOYER"
      | "accumulatedVantablackTokens"
      | "addresses"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "currentBuyTax"
      | "currentSellTax"
      | "decimals"
      | "deploymentTime"
      | "emergencyWithdraw"
      | "excludeFromFee"
      | "fees"
      | "getAddresses"
      | "getCurrentTaxes"
      | "getFees"
      | "getPlatformAddress"
      | "getProcessingConfig"
      | "isExcludedFromFee"
      | "manualSwap"
      | "name"
      | "owner"
      | "processing"
      | "projectClosed"
      | "renounceOwnership"
      | "roiAchieved"
      | "router"
      | "setBurnPercent"
      | "setFees"
      | "setSwapThreshold"
      | "symbol"
      | "taxReductionExecuted"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "vantablackDeployer"
      | "withdrawEth"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "DividendTrackerUpdated"
      | "ExcludeFromFee"
      | "FeesUpdated"
      | "LiquidityRemoved"
      | "OwnershipTransferred"
      | "ProcessedDividendTracker"
      | "ProjectClosed"
      | "SendDividends"
      | "SwapThresholdUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LAUNCH_TAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROI_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TAX_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TAX_REDUCTION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VANTABLACK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VANTABLACK_DEPLOYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulatedVantablackTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addresses", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBuyTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSellTax",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploymentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "fees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTaxes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPlatformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manualSwap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectClosed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roiAchieved",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBurnPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxReductionExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vantablackDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "LAUNCH_TAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROI_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TAX_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TAX_REDUCTION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VANTABLACK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VANTABLACK_DEPLOYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accumulatedVantablackTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBuyTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSellTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploymentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manualSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "processing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roiAchieved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBurnPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxReductionExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vantablackDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DividendTrackerUpdatedEvent {
  export type InputTuple = [newTracker: AddressLike];
  export type OutputTuple = [newTracker: string];
  export interface OutputObject {
    newTracker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeFromFeeEvent {
  export type InputTuple = [account: AddressLike, excluded: boolean];
  export type OutputTuple = [account: string, excluded: boolean];
  export interface OutputObject {
    account: string;
    excluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [
    buyFee: BigNumberish,
    sellFee: BigNumberish,
    transferFee: BigNumberish
  ];
  export type OutputTuple = [
    buyFee: bigint,
    sellFee: bigint,
    transferFee: bigint
  ];
  export interface OutputObject {
    buyFee: bigint;
    sellFee: bigint;
    transferFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [amountA: BigNumberish, amountB: BigNumberish];
  export type OutputTuple = [amountA: bigint, amountB: bigint];
  export interface OutputObject {
    amountA: bigint;
    amountB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessedDividendTrackerEvent {
  export type InputTuple = [
    iterations: BigNumberish,
    claims: BigNumberish,
    lastProcessedIndex: BigNumberish,
    automatic: boolean,
    gas: BigNumberish,
    processor: AddressLike
  ];
  export type OutputTuple = [
    iterations: bigint,
    claims: bigint,
    lastProcessedIndex: bigint,
    automatic: boolean,
    gas: bigint,
    processor: string
  ];
  export interface OutputObject {
    iterations: bigint;
    claims: bigint;
    lastProcessedIndex: bigint;
    automatic: boolean;
    gas: bigint;
    processor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectClosedEvent {
  export type InputTuple = [
    totalTaxCollected: BigNumberish,
    devShare: BigNumberish,
    buybackShare: BigNumberish,
    remainingInFunding: BigNumberish
  ];
  export type OutputTuple = [
    totalTaxCollected: bigint,
    devShare: bigint,
    buybackShare: bigint,
    remainingInFunding: bigint
  ];
  export interface OutputObject {
    totalTaxCollected: bigint;
    devShare: bigint;
    buybackShare: bigint;
    remainingInFunding: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendDividendsEvent {
  export type InputTuple = [tokensSwapped: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [tokensSwapped: bigint, amount: bigint];
  export interface OutputObject {
    tokensSwapped: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapThresholdUpdatedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    newThreshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, newThreshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    newThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Token extends BaseContract {
  connect(runner?: ContractRunner | null): Token;
  waitForDeployment(): Promise<this>;

  interface: TokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LAUNCH_TAX: TypedContractMethod<[], [bigint], "view">;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  ROI_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  TAX_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  TAX_REDUCTION_TIME: TypedContractMethod<[], [bigint], "view">;

  VANTABLACK: TypedContractMethod<[], [string], "view">;

  VANTABLACK_DEPLOYER: TypedContractMethod<[], [string], "view">;

  accumulatedVantablackTokens: TypedContractMethod<[], [bigint], "view">;

  addresses: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        lpPair: string;
        treasury: string;
        dividendToken: string;
      }
    ],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  automatedMarketMakerPairs: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  currentBuyTax: TypedContractMethod<[], [bigint], "view">;

  currentSellTax: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deploymentTime: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  excludeFromFee: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  fees: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        buyFee: bigint;
        sellFee: bigint;
        transferFee: bigint;
      }
    ],
    "view"
  >;

  getAddresses: TypedContractMethod<
    [],
    [Token.TokenAddressesStructOutput],
    "view"
  >;

  getCurrentTaxes: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        buyTax: bigint;
        sellTax: bigint;
        transferTax: bigint;
        timeUntilReduction: bigint;
      }
    ],
    "view"
  >;

  getFees: TypedContractMethod<[], [Token.FeeStructureStructOutput], "view">;

  getPlatformAddress: TypedContractMethod<[], [string], "view">;

  getProcessingConfig: TypedContractMethod<
    [],
    [Token.ProcessingConfigStructOutput],
    "view"
  >;

  isExcludedFromFee: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  manualSwap: TypedContractMethod<[], [void], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  processing: TypedContractMethod<
    [],
    [[bigint, bigint] & { swapThreshold: bigint; burnPercent: bigint }],
    "view"
  >;

  projectClosed: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roiAchieved: TypedContractMethod<[], [boolean], "view">;

  router: TypedContractMethod<[], [string], "view">;

  setBurnPercent: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [buyFee: BigNumberish, sellFee: BigNumberish, transferFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwapThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  taxReductionExecuted: TypedContractMethod<[], [boolean], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vantablackDeployer: TypedContractMethod<[], [string], "view">;

  withdrawEth: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LAUNCH_TAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROI_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TAX_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TAX_REDUCTION_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VANTABLACK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VANTABLACK_DEPLOYER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accumulatedVantablackTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addresses"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        lpPair: string;
        treasury: string;
        dividendToken: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "automatedMarketMakerPairs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentBuyTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentSellTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deploymentTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromFee"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fees"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        buyFee: bigint;
        sellFee: bigint;
        transferFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAddresses"
  ): TypedContractMethod<[], [Token.TokenAddressesStructOutput], "view">;
  getFunction(
    nameOrSignature: "getCurrentTaxes"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        buyTax: bigint;
        sellTax: bigint;
        transferTax: bigint;
        timeUntilReduction: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFees"
  ): TypedContractMethod<[], [Token.FeeStructureStructOutput], "view">;
  getFunction(
    nameOrSignature: "getPlatformAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProcessingConfig"
  ): TypedContractMethod<[], [Token.ProcessingConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromFee"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "manualSwap"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processing"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { swapThreshold: bigint; burnPercent: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "projectClosed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roiAchieved"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBurnPercent"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [buyFee: BigNumberish, sellFee: BigNumberish, transferFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxReductionExecuted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vantablackDeployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawEth"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "DividendTrackerUpdated"
  ): TypedContractEvent<
    DividendTrackerUpdatedEvent.InputTuple,
    DividendTrackerUpdatedEvent.OutputTuple,
    DividendTrackerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeFromFee"
  ): TypedContractEvent<
    ExcludeFromFeeEvent.InputTuple,
    ExcludeFromFeeEvent.OutputTuple,
    ExcludeFromFeeEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProcessedDividendTracker"
  ): TypedContractEvent<
    ProcessedDividendTrackerEvent.InputTuple,
    ProcessedDividendTrackerEvent.OutputTuple,
    ProcessedDividendTrackerEvent.OutputObject
  >;
  getEvent(
    key: "ProjectClosed"
  ): TypedContractEvent<
    ProjectClosedEvent.InputTuple,
    ProjectClosedEvent.OutputTuple,
    ProjectClosedEvent.OutputObject
  >;
  getEvent(
    key: "SendDividends"
  ): TypedContractEvent<
    SendDividendsEvent.InputTuple,
    SendDividendsEvent.OutputTuple,
    SendDividendsEvent.OutputObject
  >;
  getEvent(
    key: "SwapThresholdUpdated"
  ): TypedContractEvent<
    SwapThresholdUpdatedEvent.InputTuple,
    SwapThresholdUpdatedEvent.OutputTuple,
    SwapThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "DividendTrackerUpdated(address)": TypedContractEvent<
      DividendTrackerUpdatedEvent.InputTuple,
      DividendTrackerUpdatedEvent.OutputTuple,
      DividendTrackerUpdatedEvent.OutputObject
    >;
    DividendTrackerUpdated: TypedContractEvent<
      DividendTrackerUpdatedEvent.InputTuple,
      DividendTrackerUpdatedEvent.OutputTuple,
      DividendTrackerUpdatedEvent.OutputObject
    >;

    "ExcludeFromFee(address,bool)": TypedContractEvent<
      ExcludeFromFeeEvent.InputTuple,
      ExcludeFromFeeEvent.OutputTuple,
      ExcludeFromFeeEvent.OutputObject
    >;
    ExcludeFromFee: TypedContractEvent<
      ExcludeFromFeeEvent.InputTuple,
      ExcludeFromFeeEvent.OutputTuple,
      ExcludeFromFeeEvent.OutputObject
    >;

    "FeesUpdated(uint16,uint16,uint16)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "LiquidityRemoved(uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProcessedDividendTracker(uint256,uint256,uint256,bool,uint256,address)": TypedContractEvent<
      ProcessedDividendTrackerEvent.InputTuple,
      ProcessedDividendTrackerEvent.OutputTuple,
      ProcessedDividendTrackerEvent.OutputObject
    >;
    ProcessedDividendTracker: TypedContractEvent<
      ProcessedDividendTrackerEvent.InputTuple,
      ProcessedDividendTrackerEvent.OutputTuple,
      ProcessedDividendTrackerEvent.OutputObject
    >;

    "ProjectClosed(uint256,uint256,uint256,uint256)": TypedContractEvent<
      ProjectClosedEvent.InputTuple,
      ProjectClosedEvent.OutputTuple,
      ProjectClosedEvent.OutputObject
    >;
    ProjectClosed: TypedContractEvent<
      ProjectClosedEvent.InputTuple,
      ProjectClosedEvent.OutputTuple,
      ProjectClosedEvent.OutputObject
    >;

    "SendDividends(uint256,uint256)": TypedContractEvent<
      SendDividendsEvent.InputTuple,
      SendDividendsEvent.OutputTuple,
      SendDividendsEvent.OutputObject
    >;
    SendDividends: TypedContractEvent<
      SendDividendsEvent.InputTuple,
      SendDividendsEvent.OutputTuple,
      SendDividendsEvent.OutputObject
    >;

    "SwapThresholdUpdated(uint256,uint256)": TypedContractEvent<
      SwapThresholdUpdatedEvent.InputTuple,
      SwapThresholdUpdatedEvent.OutputTuple,
      SwapThresholdUpdatedEvent.OutputObject
    >;
    SwapThresholdUpdated: TypedContractEvent<
      SwapThresholdUpdatedEvent.InputTuple,
      SwapThresholdUpdatedEvent.OutputTuple,
      SwapThresholdUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
