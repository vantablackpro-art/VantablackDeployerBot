/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PLATFORM_FEE_PERCENT"
      | "TAX_DIVISOR"
      | "_feesRates"
      | "_holderLastTransferTimestamp"
      | "_isExcludedFromFee"
      | "_isExcludedFromMaxTx"
      | "allowance"
      | "approve"
      | "autoLiquidity"
      | "autoLiquidityPercent"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "buyBackPercent"
      | "buyBackThreshold"
      | "decimals"
      | "decreaseAllowance"
      | "distributionRewardsPercent"
      | "dividendTokenAddress"
      | "dividentTokenBridgeAddress"
      | "excludeFromFee"
      | "excludeFromMaxTx"
      | "gasForProcessing"
      | "gasLimitActive"
      | "inSwap"
      | "increaseAllowance"
      | "initialDelayTime"
      | "isExcludedFromFee"
      | "isExcludedFromMaxTx"
      | "lpPair"
      | "maxBuyLimit"
      | "maxGasPriceLimit"
      | "maxTransactionAmount"
      | "maxWalletAmount"
      | "name"
      | "owner"
      | "platformFeeAddresses"
      | "platformFeeAmount"
      | "platformFeePercents"
      | "preMintAmount"
      | "renounceOwnership"
      | "router"
      | "setAutoLiquidityPercent"
      | "setBuyBackPercent"
      | "setBuyBackThreshold"
      | "setDistributionRewardsPercent"
      | "setMaxTransactionAmount"
      | "setMaxWalletAmount"
      | "setSwapThreshold"
      | "setTaxes"
      | "swapThreshold"
      | "symbol"
      | "timeDelayBetweenTx"
      | "tokenDividendTracker"
      | "totalDelayTime"
      | "totalSupply"
      | "transfer"
      | "transferDelayEnabled"
      | "transferFrom"
      | "transferOwnership"
      | "treasuryAddress"
      | "updateDividendTracker"
      | "updateDividentTokenBridgeAddress"
      | "updateGasLimitActive"
      | "updateMaxBuyLimit"
      | "updateMaxGasPriceLimit"
      | "updateTransferDelayEnabled"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "OwnershipTransferred"
      | "ProcessedDividendTracker"
      | "SendDividends"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PLATFORM_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TAX_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_feesRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_holderLastTransferTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_isExcludedFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_isExcludedFromMaxTx",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "autoLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "autoLiquidityPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionRewardsPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dividentTokenBridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTx",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "gasForProcessing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasLimitActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "inSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialDelayTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromMaxTx",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lpPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxBuyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPriceLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preMintAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAutoLiquidityPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionRewardsPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTransactionAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxes",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeDelayBetweenTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDividendTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDelayTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDelayEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDividendTracker",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDividentTokenBridgeAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasLimitActive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxBuyLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxGasPriceLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransferDelayEnabled",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TAX_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_feesRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_holderLastTransferTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isExcludedFromMaxTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoLiquidityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBackPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionRewardsPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividentTokenBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasLimitActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialDelayTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromMaxTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBuyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPriceLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAutoLiquidityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionRewardsPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTaxes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeDelayBetweenTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDelayTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDelayEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDividentTokenBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasLimitActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxBuyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxGasPriceLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferDelayEnabled",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessedDividendTrackerEvent {
  export type InputTuple = [
    iterations: BigNumberish,
    claims: BigNumberish,
    lastProcessedIndex: BigNumberish,
    automatic: boolean,
    gas: BigNumberish,
    processor: AddressLike
  ];
  export type OutputTuple = [
    iterations: bigint,
    claims: bigint,
    lastProcessedIndex: bigint,
    automatic: boolean,
    gas: bigint,
    processor: string
  ];
  export interface OutputObject {
    iterations: bigint;
    claims: bigint;
    lastProcessedIndex: bigint;
    automatic: boolean;
    gas: bigint;
    processor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendDividendsEvent {
  export type InputTuple = [tokensSwapped: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [tokensSwapped: bigint, amount: bigint];
  export interface OutputObject {
    tokensSwapped: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Token extends BaseContract {
  connect(runner?: ContractRunner | null): Token;
  waitForDeployment(): Promise<this>;

  interface: TokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PLATFORM_FEE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  TAX_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  _feesRates: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        buyFee: bigint;
        sellFee: bigint;
        transferFee: bigint;
      }
    ],
    "view"
  >;

  _holderLastTransferTimestamp: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  _isExcludedFromFee: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  _isExcludedFromMaxTx: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  autoLiquidity: TypedContractMethod<
    [tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  autoLiquidityPercent: TypedContractMethod<[], [bigint], "view">;

  automatedMarketMakerPairs: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyBackPercent: TypedContractMethod<[], [bigint], "view">;

  buyBackThreshold: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  distributionRewardsPercent: TypedContractMethod<[], [bigint], "view">;

  dividendTokenAddress: TypedContractMethod<[], [string], "view">;

  dividentTokenBridgeAddress: TypedContractMethod<[], [string], "view">;

  excludeFromFee: TypedContractMethod<
    [account: AddressLike, val: boolean],
    [void],
    "nonpayable"
  >;

  excludeFromMaxTx: TypedContractMethod<
    [account: AddressLike, val: boolean],
    [void],
    "nonpayable"
  >;

  gasForProcessing: TypedContractMethod<[], [bigint], "view">;

  gasLimitActive: TypedContractMethod<[], [boolean], "view">;

  inSwap: TypedContractMethod<[], [boolean], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialDelayTime: TypedContractMethod<[], [bigint], "view">;

  isExcludedFromFee: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedFromMaxTx: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  lpPair: TypedContractMethod<[], [string], "view">;

  maxBuyLimit: TypedContractMethod<[], [bigint], "view">;

  maxGasPriceLimit: TypedContractMethod<[], [bigint], "view">;

  maxTransactionAmount: TypedContractMethod<[], [bigint], "view">;

  maxWalletAmount: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeeAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  platformFeeAmount: TypedContractMethod<[], [bigint], "view">;

  platformFeePercents: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  preMintAmount: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  setAutoLiquidityPercent: TypedContractMethod<
    [newPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBuyBackPercent: TypedContractMethod<
    [newPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBuyBackThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDistributionRewardsPercent: TypedContractMethod<
    [newPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxTransactionAmount: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxWalletAmount: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwapThreshold: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTaxes: TypedContractMethod<
    [buyFee: BigNumberish, sellFee: BigNumberish, transferFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapThreshold: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  timeDelayBetweenTx: TypedContractMethod<[], [bigint], "view">;

  tokenDividendTracker: TypedContractMethod<[], [string], "view">;

  totalDelayTime: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferDelayEnabled: TypedContractMethod<[], [boolean], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryAddress: TypedContractMethod<[], [string], "view">;

  updateDividendTracker: TypedContractMethod<
    [newAddress: AddressLike, percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateDividentTokenBridgeAddress: TypedContractMethod<
    [newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateGasLimitActive: TypedContractMethod<
    [newVal: boolean],
    [void],
    "nonpayable"
  >;

  updateMaxBuyLimit: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxGasPriceLimit: TypedContractMethod<
    [newValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTransferDelayEnabled: TypedContractMethod<
    [newVal: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PLATFORM_FEE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TAX_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_feesRates"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        buyFee: bigint;
        sellFee: bigint;
        transferFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_holderLastTransferTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_isExcludedFromFee"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "_isExcludedFromMaxTx"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "autoLiquidity"
  ): TypedContractMethod<[tokenAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "autoLiquidityPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "automatedMarketMakerPairs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyBackPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyBackThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributionRewardsPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dividendTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dividentTokenBridgeAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "excludeFromFee"
  ): TypedContractMethod<
    [account: AddressLike, val: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeFromMaxTx"
  ): TypedContractMethod<
    [account: AddressLike, val: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gasForProcessing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasLimitActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "inSwap"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialDelayTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromFee"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromMaxTx"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lpPair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxBuyLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxGasPriceLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTransactionAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWalletAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformFeePercents"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "preMintAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAutoLiquidityPercent"
  ): TypedContractMethod<[newPercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBuyBackPercent"
  ): TypedContractMethod<[newPercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBuyBackThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDistributionRewardsPercent"
  ): TypedContractMethod<[newPercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxTransactionAmount"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxWalletAmount"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapThreshold"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTaxes"
  ): TypedContractMethod<
    [buyFee: BigNumberish, sellFee: BigNumberish, transferFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timeDelayBetweenTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenDividendTracker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalDelayTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferDelayEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateDividendTracker"
  ): TypedContractMethod<
    [newAddress: AddressLike, percent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDividentTokenBridgeAddress"
  ): TypedContractMethod<[newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGasLimitActive"
  ): TypedContractMethod<[newVal: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxBuyLimit"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxGasPriceLimit"
  ): TypedContractMethod<[newValue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTransferDelayEnabled"
  ): TypedContractMethod<[newVal: boolean], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProcessedDividendTracker"
  ): TypedContractEvent<
    ProcessedDividendTrackerEvent.InputTuple,
    ProcessedDividendTrackerEvent.OutputTuple,
    ProcessedDividendTrackerEvent.OutputObject
  >;
  getEvent(
    key: "SendDividends"
  ): TypedContractEvent<
    SendDividendsEvent.InputTuple,
    SendDividendsEvent.OutputTuple,
    SendDividendsEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProcessedDividendTracker(uint256,uint256,uint256,bool,uint256,address)": TypedContractEvent<
      ProcessedDividendTrackerEvent.InputTuple,
      ProcessedDividendTrackerEvent.OutputTuple,
      ProcessedDividendTrackerEvent.OutputObject
    >;
    ProcessedDividendTracker: TypedContractEvent<
      ProcessedDividendTrackerEvent.InputTuple,
      ProcessedDividendTrackerEvent.OutputTuple,
      ProcessedDividendTrackerEvent.OutputObject
    >;

    "SendDividends(uint256,uint256)": TypedContractEvent<
      SendDividendsEvent.InputTuple,
      SendDividendsEvent.OutputTuple,
      SendDividendsEvent.OutputObject
    >;
    SendDividends: TypedContractEvent<
      SendDividendsEvent.InputTuple,
      SendDividendsEvent.OutputTuple,
      SendDividendsEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
