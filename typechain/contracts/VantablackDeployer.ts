/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VantablackDeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEAD_ADDRESS"
      | "MAX_FEE"
      | "addToApproved"
      | "approvedDevs"
      | "canVantablackFund"
      | "closeProject"
      | "deployToken"
      | "deployedTokens"
      | "deployedTokensCount"
      | "deployedTokensIds"
      | "deployer"
      | "estimateFirstBuyTokens"
      | "executeHandover"
      | "getLPLockInfo"
      | "getProjectTaxBalance"
      | "initialize"
      | "isApproveded"
      | "isTokenDeployedByVantablack"
      | "liquidityManager"
      | "lpFundingAmount"
      | "lpFundingBalance"
      | "owner"
      | "removeFromApproved"
      | "renounceOwnership"
      | "router"
      | "setLiquidityManager"
      | "setLpFundingAmount"
      | "setUnicryptLocker"
      | "transferOwnership"
      | "unlockLP"
      | "updateDeployedTokenTaxBalance"
      | "updateDeployerAddress"
      | "withdrawEth"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DevApproveded"
      | "DevRemovedFromApproved"
      | "HandoverExecuted"
      | "Initialized"
      | "LPTokensBurned"
      | "LiquidityRemoved"
      | "OwnershipTransferred"
      | "ProjectClosed"
      | "TokenDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEAD_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToApproved",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedDevs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canVantablackFund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeProject",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployToken",
    values: [
      [BigNumberish, BigNumberish, BigNumberish],
      [AddressLike, AddressLike, AddressLike, AddressLike],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [boolean, boolean],
      [string, string]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedTokensCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployedTokensIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateFirstBuyTokens",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHandover",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPLockInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectTaxBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApproveded",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenDeployedByVantablack",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpFundingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpFundingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromApproved",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLiquidityManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpFundingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnicryptLocker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockLP",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeployedTokenTaxBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeployerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEAD_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedDevs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canVantablackFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedTokensCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedTokensIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateFirstBuyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPLockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectTaxBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApproveded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenDeployedByVantablack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpFundingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpFundingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpFundingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnicryptLocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDeployedTokenTaxBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace DevApprovededEvent {
  export type InputTuple = [dev: AddressLike];
  export type OutputTuple = [dev: string];
  export interface OutputObject {
    dev: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevRemovedFromApprovedEvent {
  export type InputTuple = [dev: AddressLike];
  export type OutputTuple = [dev: string];
  export interface OutputObject {
    dev: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HandoverExecutedEvent {
  export type InputTuple = [
    totalTaxSent: BigNumberish,
    newTreasuryAddress: AddressLike,
    lpTokensTransferred: BigNumberish
  ];
  export type OutputTuple = [
    totalTaxSent: bigint,
    newTreasuryAddress: string,
    lpTokensTransferred: bigint
  ];
  export interface OutputObject {
    totalTaxSent: bigint;
    newTreasuryAddress: string;
    lpTokensTransferred: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LPTokensBurnedEvent {
  export type InputTuple = [tokenAddress: AddressLike, lpAmount: BigNumberish];
  export type OutputTuple = [tokenAddress: string, lpAmount: bigint];
  export interface OutputObject {
    tokenAddress: string;
    lpAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [amountA: BigNumberish, amountB: BigNumberish];
  export type OutputTuple = [amountA: bigint, amountB: bigint];
  export interface OutputObject {
    amountA: bigint;
    amountB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectClosedEvent {
  export type InputTuple = [
    totalTaxCollected: BigNumberish,
    devShare: BigNumberish,
    buybackShare: BigNumberish,
    remainingInFunding: BigNumberish
  ];
  export type OutputTuple = [
    totalTaxCollected: bigint,
    devShare: bigint,
    buybackShare: bigint,
    remainingInFunding: bigint
  ];
  export interface OutputObject {
    totalTaxCollected: bigint;
    devShare: bigint;
    buybackShare: bigint;
    remainingInFunding: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDeployedEvent {
  export type InputTuple = [tokenAddress: AddressLike, dev: AddressLike];
  export type OutputTuple = [tokenAddress: string, dev: string];
  export interface OutputObject {
    tokenAddress: string;
    dev: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VantablackDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): VantablackDeployer;
  waitForDeployment(): Promise<this>;

  interface: VantablackDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEAD_ADDRESS: TypedContractMethod<[], [string], "view">;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  addToApproved: TypedContractMethod<[dev: AddressLike], [void], "nonpayable">;

  approvedDevs: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  canVantablackFund: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  closeProject: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  deployToken: TypedContractMethod<
    [
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      addrs: [AddressLike, AddressLike, AddressLike, AddressLike],
      percents: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flags: [boolean, boolean],
      metadata: [string, string]
    ],
    [void],
    "payable"
  >;

  deployedTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        tokenAddress: string;
        owner: string;
        dev: string;
        lpPair: string;
        lpOwner: string;
        isProjectClosed: boolean;
        roiAchieved: boolean;
        burnLP: boolean;
        lockTokens: boolean;
        lockDuration: bigint;
        projectTaxBalance: bigint;
        lpManagementOption: bigint;
        lpLockExpiry: bigint;
      }
    ],
    "view"
  >;

  deployedTokensCount: TypedContractMethod<[], [bigint], "view">;

  deployedTokensIds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  deployer: TypedContractMethod<[], [string], "view">;

  estimateFirstBuyTokens: TypedContractMethod<
    [
      ethAmount: BigNumberish,
      ethLiquidityAmount: BigNumberish,
      tokenLiquidityAmount: BigNumberish,
      buyTax: BigNumberish
    ],
    [[bigint, bigint] & { tokensReceived: bigint; taxAmount: bigint }],
    "view"
  >;

  executeHandover: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getLPLockInfo: TypedContractMethod<
    [tokenAddress: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        lpManagementOption: bigint;
        lpLockExpiry: bigint;
        lpBalance: bigint;
        canUnlock: boolean;
        isUnicryptLocked: boolean;
        unicryptUnlockDate: bigint;
        unicryptLockAmount: bigint;
        lockOwner: string;
        lockIndex: bigint;
      }
    ],
    "view"
  >;

  getProjectTaxBalance: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isApproveded: TypedContractMethod<[dev: AddressLike], [boolean], "view">;

  isTokenDeployedByVantablack: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  liquidityManager: TypedContractMethod<[], [string], "view">;

  lpFundingAmount: TypedContractMethod<[], [bigint], "view">;

  lpFundingBalance: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeFromApproved: TypedContractMethod<
    [dev: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  setLiquidityManager: TypedContractMethod<
    [_liquidityManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setLpFundingAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUnicryptLocker: TypedContractMethod<
    [_unicryptLocker: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockLP: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDeployedTokenTaxBalance: TypedContractMethod<[], [void], "payable">;

  updateDeployerAddress: TypedContractMethod<
    [newDeployer: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawEth: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEAD_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addToApproved"
  ): TypedContractMethod<[dev: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedDevs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canVantablackFund"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "closeProject"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployToken"
  ): TypedContractMethod<
    [
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      addrs: [AddressLike, AddressLike, AddressLike, AddressLike],
      percents: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flags: [boolean, boolean],
      metadata: [string, string]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployedTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        tokenAddress: string;
        owner: string;
        dev: string;
        lpPair: string;
        lpOwner: string;
        isProjectClosed: boolean;
        roiAchieved: boolean;
        burnLP: boolean;
        lockTokens: boolean;
        lockDuration: bigint;
        projectTaxBalance: bigint;
        lpManagementOption: bigint;
        lpLockExpiry: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployedTokensCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deployedTokensIds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "estimateFirstBuyTokens"
  ): TypedContractMethod<
    [
      ethAmount: BigNumberish,
      ethLiquidityAmount: BigNumberish,
      tokenLiquidityAmount: BigNumberish,
      buyTax: BigNumberish
    ],
    [[bigint, bigint] & { tokensReceived: bigint; taxAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeHandover"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getLPLockInfo"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        lpManagementOption: bigint;
        lpLockExpiry: bigint;
        lpBalance: bigint;
        canUnlock: boolean;
        isUnicryptLocked: boolean;
        unicryptUnlockDate: bigint;
        unicryptLockAmount: bigint;
        lockOwner: string;
        lockIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectTaxBalance"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isApproveded"
  ): TypedContractMethod<[dev: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenDeployedByVantablack"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidityManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lpFundingAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpFundingBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFromApproved"
  ): TypedContractMethod<[dev: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setLiquidityManager"
  ): TypedContractMethod<
    [_liquidityManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLpFundingAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUnicryptLocker"
  ): TypedContractMethod<[_unicryptLocker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockLP"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDeployedTokenTaxBalance"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "updateDeployerAddress"
  ): TypedContractMethod<[newDeployer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawEth"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DevApproveded"
  ): TypedContractEvent<
    DevApprovededEvent.InputTuple,
    DevApprovededEvent.OutputTuple,
    DevApprovededEvent.OutputObject
  >;
  getEvent(
    key: "DevRemovedFromApproved"
  ): TypedContractEvent<
    DevRemovedFromApprovedEvent.InputTuple,
    DevRemovedFromApprovedEvent.OutputTuple,
    DevRemovedFromApprovedEvent.OutputObject
  >;
  getEvent(
    key: "HandoverExecuted"
  ): TypedContractEvent<
    HandoverExecutedEvent.InputTuple,
    HandoverExecutedEvent.OutputTuple,
    HandoverExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LPTokensBurned"
  ): TypedContractEvent<
    LPTokensBurnedEvent.InputTuple,
    LPTokensBurnedEvent.OutputTuple,
    LPTokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectClosed"
  ): TypedContractEvent<
    ProjectClosedEvent.InputTuple,
    ProjectClosedEvent.OutputTuple,
    ProjectClosedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDeployed"
  ): TypedContractEvent<
    TokenDeployedEvent.InputTuple,
    TokenDeployedEvent.OutputTuple,
    TokenDeployedEvent.OutputObject
  >;

  filters: {
    "DevApproveded(address)": TypedContractEvent<
      DevApprovededEvent.InputTuple,
      DevApprovededEvent.OutputTuple,
      DevApprovededEvent.OutputObject
    >;
    DevApproveded: TypedContractEvent<
      DevApprovededEvent.InputTuple,
      DevApprovededEvent.OutputTuple,
      DevApprovededEvent.OutputObject
    >;

    "DevRemovedFromApproved(address)": TypedContractEvent<
      DevRemovedFromApprovedEvent.InputTuple,
      DevRemovedFromApprovedEvent.OutputTuple,
      DevRemovedFromApprovedEvent.OutputObject
    >;
    DevRemovedFromApproved: TypedContractEvent<
      DevRemovedFromApprovedEvent.InputTuple,
      DevRemovedFromApprovedEvent.OutputTuple,
      DevRemovedFromApprovedEvent.OutputObject
    >;

    "HandoverExecuted(uint256,address,uint256)": TypedContractEvent<
      HandoverExecutedEvent.InputTuple,
      HandoverExecutedEvent.OutputTuple,
      HandoverExecutedEvent.OutputObject
    >;
    HandoverExecuted: TypedContractEvent<
      HandoverExecutedEvent.InputTuple,
      HandoverExecutedEvent.OutputTuple,
      HandoverExecutedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LPTokensBurned(address,uint256)": TypedContractEvent<
      LPTokensBurnedEvent.InputTuple,
      LPTokensBurnedEvent.OutputTuple,
      LPTokensBurnedEvent.OutputObject
    >;
    LPTokensBurned: TypedContractEvent<
      LPTokensBurnedEvent.InputTuple,
      LPTokensBurnedEvent.OutputTuple,
      LPTokensBurnedEvent.OutputObject
    >;

    "LiquidityRemoved(uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectClosed(uint256,uint256,uint256,uint256)": TypedContractEvent<
      ProjectClosedEvent.InputTuple,
      ProjectClosedEvent.OutputTuple,
      ProjectClosedEvent.OutputObject
    >;
    ProjectClosed: TypedContractEvent<
      ProjectClosedEvent.InputTuple,
      ProjectClosedEvent.OutputTuple,
      ProjectClosedEvent.OutputObject
    >;

    "TokenDeployed(address,address)": TypedContractEvent<
      TokenDeployedEvent.InputTuple,
      TokenDeployedEvent.OutputTuple,
      TokenDeployedEvent.OutputObject
    >;
    TokenDeployed: TypedContractEvent<
      TokenDeployedEvent.InputTuple,
      TokenDeployedEvent.OutputTuple,
      TokenDeployedEvent.OutputObject
    >;
  };
}
