/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DividendPayingTokenInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature: "dividendOf" | "withdrawDividend"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DividendWithdrawn" | "DividendsDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "dividendOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDividend",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "dividendOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDividend",
    data: BytesLike
  ): Result;
}

export namespace DividendWithdrawnEvent {
  export type InputTuple = [to: AddressLike, weiAmount: BigNumberish];
  export type OutputTuple = [to: string, weiAmount: bigint];
  export interface OutputObject {
    to: string;
    weiAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DividendsDistributedEvent {
  export type InputTuple = [from: AddressLike, weiAmount: BigNumberish];
  export type OutputTuple = [from: string, weiAmount: bigint];
  export interface OutputObject {
    from: string;
    weiAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DividendPayingTokenInterface extends BaseContract {
  connect(runner?: ContractRunner | null): DividendPayingTokenInterface;
  waitForDeployment(): Promise<this>;

  interface: DividendPayingTokenInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dividendOf: TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  withdrawDividend: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dividendOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawDividend"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DividendWithdrawn"
  ): TypedContractEvent<
    DividendWithdrawnEvent.InputTuple,
    DividendWithdrawnEvent.OutputTuple,
    DividendWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "DividendsDistributed"
  ): TypedContractEvent<
    DividendsDistributedEvent.InputTuple,
    DividendsDistributedEvent.OutputTuple,
    DividendsDistributedEvent.OutputObject
  >;

  filters: {
    "DividendWithdrawn(address,uint256)": TypedContractEvent<
      DividendWithdrawnEvent.InputTuple,
      DividendWithdrawnEvent.OutputTuple,
      DividendWithdrawnEvent.OutputObject
    >;
    DividendWithdrawn: TypedContractEvent<
      DividendWithdrawnEvent.InputTuple,
      DividendWithdrawnEvent.OutputTuple,
      DividendWithdrawnEvent.OutputObject
    >;

    "DividendsDistributed(address,uint256)": TypedContractEvent<
      DividendsDistributedEvent.InputTuple,
      DividendsDistributedEvent.OutputTuple,
      DividendsDistributedEvent.OutputObject
    >;
    DividendsDistributed: TypedContractEvent<
      DividendsDistributedEvent.InputTuple,
      DividendsDistributedEvent.OutputTuple,
      DividendsDistributedEvent.OutputObject
    >;
  };
}
