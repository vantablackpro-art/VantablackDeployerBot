/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DividendTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accumulativeDividendOf"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claimWait"
      | "decimals"
      | "distributeDividends"
      | "dividendOf"
      | "excludeFromDividends"
      | "excludedFromDividends"
      | "getAccount"
      | "getAccountAtIndex"
      | "getLastProcessedIndex"
      | "getNumberOfTokenHolders"
      | "lastClaimTimes"
      | "lastProcessedIndex"
      | "minimumTokenBalanceForDividends"
      | "name"
      | "owner"
      | "process"
      | "processAccount"
      | "renounceOwnership"
      | "rewardsToken"
      | "setBalance"
      | "symbol"
      | "totalDividendsDistributed"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "updateClaimWait"
      | "withdrawDividend"
      | "withdrawableDividendOf"
      | "withdrawnDividendOf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Claim"
      | "ClaimWaitUpdated"
      | "DividendWithdrawn"
      | "DividendsDistributed"
      | "ExcludeFromDividends"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accumulativeDividendOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "claimWait", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeDividends",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromDividends",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromDividends",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfTokenHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimTimes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProcessedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTokenBalanceForDividends",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processAccount",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDividendsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimWait",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDividend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableDividendOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnDividendOf",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulativeDividendOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimWait", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dividendOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfTokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastProcessedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTokenBalanceForDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDividendsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableDividendOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnDividendOf",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    account: AddressLike,
    amount: BigNumberish,
    automatic: boolean
  ];
  export type OutputTuple = [
    account: string,
    amount: bigint,
    automatic: boolean
  ];
  export interface OutputObject {
    account: string;
    amount: bigint;
    automatic: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimWaitUpdatedEvent {
  export type InputTuple = [newValue: BigNumberish, oldValue: BigNumberish];
  export type OutputTuple = [newValue: bigint, oldValue: bigint];
  export interface OutputObject {
    newValue: bigint;
    oldValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DividendWithdrawnEvent {
  export type InputTuple = [to: AddressLike, weiAmount: BigNumberish];
  export type OutputTuple = [to: string, weiAmount: bigint];
  export interface OutputObject {
    to: string;
    weiAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DividendsDistributedEvent {
  export type InputTuple = [from: AddressLike, weiAmount: BigNumberish];
  export type OutputTuple = [from: string, weiAmount: bigint];
  export interface OutputObject {
    from: string;
    weiAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeFromDividendsEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DividendTracker extends BaseContract {
  connect(runner?: ContractRunner | null): DividendTracker;
  waitForDeployment(): Promise<this>;

  interface: DividendTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accumulativeDividendOf: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claimWait: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  distributeDividends: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  dividendOf: TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  excludeFromDividends: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  excludedFromDividends: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getAccount: TypedContractMethod<
    [_account: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        account: string;
        index: bigint;
        iterationsUntilProcessed: bigint;
        withdrawableDividends: bigint;
        totalDividends: bigint;
        lastClaimTime: bigint;
        nextClaimTime: bigint;
        secondsUntilAutoClaimAvailable: bigint;
      }
    ],
    "view"
  >;

  getAccountAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [[string, bigint, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getLastProcessedIndex: TypedContractMethod<[], [bigint], "view">;

  getNumberOfTokenHolders: TypedContractMethod<[], [bigint], "view">;

  lastClaimTimes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastProcessedIndex: TypedContractMethod<[], [bigint], "view">;

  minimumTokenBalanceForDividends: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  process: TypedContractMethod<
    [gas: BigNumberish],
    [[bigint, bigint, bigint]],
    "nonpayable"
  >;

  processAccount: TypedContractMethod<
    [account: AddressLike, automatic: boolean],
    [boolean],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardsToken: TypedContractMethod<[], [string], "view">;

  setBalance: TypedContractMethod<
    [account: AddressLike, newBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalDividendsDistributed: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateClaimWait: TypedContractMethod<
    [newClaimWait: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawDividend: TypedContractMethod<[], [void], "view">;

  withdrawableDividendOf: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  withdrawnDividendOf: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accumulativeDividendOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimWait"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributeDividends"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dividendOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "excludeFromDividends"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludedFromDividends"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAccount"
  ): TypedContractMethod<
    [_account: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        account: string;
        index: bigint;
        iterationsUntilProcessed: bigint;
        withdrawableDividends: bigint;
        totalDividends: bigint;
        lastClaimTime: bigint;
        nextClaimTime: bigint;
        secondsUntilAutoClaimAvailable: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountAtIndex"
  ): TypedContractMethod<
    [index: BigNumberish],
    [[string, bigint, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastProcessedIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfTokenHolders"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastClaimTimes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastProcessedIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumTokenBalanceForDividends"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "process"
  ): TypedContractMethod<
    [gas: BigNumberish],
    [[bigint, bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processAccount"
  ): TypedContractMethod<
    [account: AddressLike, automatic: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardsToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBalance"
  ): TypedContractMethod<
    [account: AddressLike, newBalance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalDividendsDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateClaimWait"
  ): TypedContractMethod<[newClaimWait: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawDividend"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "withdrawableDividendOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawnDividendOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "ClaimWaitUpdated"
  ): TypedContractEvent<
    ClaimWaitUpdatedEvent.InputTuple,
    ClaimWaitUpdatedEvent.OutputTuple,
    ClaimWaitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DividendWithdrawn"
  ): TypedContractEvent<
    DividendWithdrawnEvent.InputTuple,
    DividendWithdrawnEvent.OutputTuple,
    DividendWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "DividendsDistributed"
  ): TypedContractEvent<
    DividendsDistributedEvent.InputTuple,
    DividendsDistributedEvent.OutputTuple,
    DividendsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeFromDividends"
  ): TypedContractEvent<
    ExcludeFromDividendsEvent.InputTuple,
    ExcludeFromDividendsEvent.OutputTuple,
    ExcludeFromDividendsEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Claim(address,uint256,bool)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "ClaimWaitUpdated(uint256,uint256)": TypedContractEvent<
      ClaimWaitUpdatedEvent.InputTuple,
      ClaimWaitUpdatedEvent.OutputTuple,
      ClaimWaitUpdatedEvent.OutputObject
    >;
    ClaimWaitUpdated: TypedContractEvent<
      ClaimWaitUpdatedEvent.InputTuple,
      ClaimWaitUpdatedEvent.OutputTuple,
      ClaimWaitUpdatedEvent.OutputObject
    >;

    "DividendWithdrawn(address,uint256)": TypedContractEvent<
      DividendWithdrawnEvent.InputTuple,
      DividendWithdrawnEvent.OutputTuple,
      DividendWithdrawnEvent.OutputObject
    >;
    DividendWithdrawn: TypedContractEvent<
      DividendWithdrawnEvent.InputTuple,
      DividendWithdrawnEvent.OutputTuple,
      DividendWithdrawnEvent.OutputObject
    >;

    "DividendsDistributed(address,uint256)": TypedContractEvent<
      DividendsDistributedEvent.InputTuple,
      DividendsDistributedEvent.OutputTuple,
      DividendsDistributedEvent.OutputObject
    >;
    DividendsDistributed: TypedContractEvent<
      DividendsDistributedEvent.InputTuple,
      DividendsDistributedEvent.OutputTuple,
      DividendsDistributedEvent.OutputObject
    >;

    "ExcludeFromDividends(address)": TypedContractEvent<
      ExcludeFromDividendsEvent.InputTuple,
      ExcludeFromDividendsEvent.OutputTuple,
      ExcludeFromDividendsEvent.OutputObject
    >;
    ExcludeFromDividends: TypedContractEvent<
      ExcludeFromDividendsEvent.InputTuple,
      ExcludeFromDividendsEvent.OutputTuple,
      ExcludeFromDividendsEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
