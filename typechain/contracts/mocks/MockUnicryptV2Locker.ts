/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockUnicryptV2LockerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ETH_FEE"
      | "gFees"
      | "getUserLockForTokenAtIndex"
      | "getUserNumLocksForToken"
      | "lockLPToken"
      | "locks"
      | "setShouldFail"
      | "shouldFail"
      | "userNumLocksForToken"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ETH_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "gFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserLockForTokenAtIndex",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNumLocksForToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockLPToken",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "locks",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldFail",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldFail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userNumLocksForToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ETH_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserLockForTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNumLocksForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setShouldFail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shouldFail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userNumLocksForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface MockUnicryptV2Locker extends BaseContract {
  connect(runner?: ContractRunner | null): MockUnicryptV2Locker;
  waitForDeployment(): Promise<this>;

  interface: MockUnicryptV2LockerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ETH_FEE: TypedContractMethod<[], [bigint], "view">;

  gFees: TypedContractMethod<
    [],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        ethFee: bigint;
        secondaryFeeToken: string;
        secondaryTokenFee: bigint;
        secondaryTokenDiscount: bigint;
        liquidityFee: bigint;
        referralPercent: bigint;
        referralToken: string;
        referralHold: bigint;
        referralDiscount: bigint;
      }
    ],
    "view"
  >;

  getUserLockForTokenAtIndex: TypedContractMethod<
    [_user: AddressLike, _lpToken: AddressLike, _index: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string] & {
        lockDate: bigint;
        amount: bigint;
        initialAmount: bigint;
        unlockDate: bigint;
        lockID: bigint;
        owner: string;
      }
    ],
    "view"
  >;

  getUserNumLocksForToken: TypedContractMethod<
    [_user: AddressLike, _lpToken: AddressLike],
    [bigint],
    "view"
  >;

  lockLPToken: TypedContractMethod<
    [
      _lpToken: AddressLike,
      _amount: BigNumberish,
      _unlock_date: BigNumberish,
      _referral: AddressLike,
      _fee_in_eth: boolean,
      _withdrawer: AddressLike
    ],
    [void],
    "payable"
  >;

  locks: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string] & {
        lockDate: bigint;
        amount: bigint;
        initialAmount: bigint;
        unlockDate: bigint;
        lockID: bigint;
        owner: string;
      }
    ],
    "view"
  >;

  setShouldFail: TypedContractMethod<
    [_shouldFail: boolean],
    [void],
    "nonpayable"
  >;

  shouldFail: TypedContractMethod<[], [boolean], "view">;

  userNumLocksForToken: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [
      _lpToken: AddressLike,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ETH_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gFees"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        ethFee: bigint;
        secondaryFeeToken: string;
        secondaryTokenFee: bigint;
        secondaryTokenDiscount: bigint;
        liquidityFee: bigint;
        referralPercent: bigint;
        referralToken: string;
        referralHold: bigint;
        referralDiscount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLockForTokenAtIndex"
  ): TypedContractMethod<
    [_user: AddressLike, _lpToken: AddressLike, _index: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string] & {
        lockDate: bigint;
        amount: bigint;
        initialAmount: bigint;
        unlockDate: bigint;
        lockID: bigint;
        owner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserNumLocksForToken"
  ): TypedContractMethod<
    [_user: AddressLike, _lpToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockLPToken"
  ): TypedContractMethod<
    [
      _lpToken: AddressLike,
      _amount: BigNumberish,
      _unlock_date: BigNumberish,
      _referral: AddressLike,
      _fee_in_eth: boolean,
      _withdrawer: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "locks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string] & {
        lockDate: bigint;
        amount: bigint;
        initialAmount: bigint;
        unlockDate: bigint;
        lockID: bigint;
        owner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setShouldFail"
  ): TypedContractMethod<[_shouldFail: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shouldFail"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "userNumLocksForToken"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      _lpToken: AddressLike,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
